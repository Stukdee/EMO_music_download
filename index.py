# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'shuchucs.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
from PyQt5.QtCore import QStringListModel
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPalette, QPixmap, QColor
import os
import re
import json
import requests
from lxml import etree



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(410, 530)
        MainWindow.setMinimumSize(QtCore.QSize(410, 530))
        MainWindow.setMaximumSize(QtCore.QSize(410, 530))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.GeShouID = QtWidgets.QLineEdit(self.centralwidget)
        self.GeShouID.setGeometry(QtCore.QRect(90, 40, 211, 21))
        self.GeShouID.setObjectName("GeShouID")
        self.GeShouID.setStyleSheet("QWidget{color:black;border-radius:5px}""QWidget:hover{background:#ced6e0}""QWidget{border:none}""QWidget{background: #dfe4ea}")
        self.GeShouID.setPlaceholderText("歌手ID")
        self.KaiShi = QtWidgets.QPushButton(self.centralwidget)
        self.KaiShi.setGeometry(QtCore.QRect(150, 480, 92, 28))
        self.KaiShi.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.KaiShi.setObjectName("KaiShi")
        self.KaiShi.setStyleSheet("QPushButton{color:black;border-radius:10px}""QPushButton:hover{background:#2ed573}""QPushButton{border:none}""QPushButton {background: #7bed9f}")
        self.KaiShi.clicked.connect(lambda: self.startdo())
        self.GeShouGeQu = QtWidgets.QListView(self.centralwidget)
        self.GeShouGeQu.setGeometry(QtCore.QRect(0, 80, 411, 371))
        self.GeShouGeQu.setObjectName("GeShouGeQu")
        self.slm = QStringListModel()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "网易歌手音乐爬虫"))
        self.KaiShi.setText(_translate("MainWindow", "开始"))

    def download_songs(self,url):
        self.gequlist = []
        if url is None:
            url = 'https://music.163.com/#/playlist?id=2384642500'

        url = url.replace('/#', '').replace('https', 'http')
        out_link = 'http://music.163.com/song/media/outer/url?id='
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36',
            'Referer': 'https://music.163.com/',
            'Host': 'music.163.com'
        }
        res = requests.get(url=url, headers=headers).text

        tree = etree.HTML(res)
        song_list = tree.xpath('//ul[@class="f-hide"]/li/a')
        artist_name_tree = tree.xpath('//h2[@id="artist-name"]/text()')
        artist_name = str(artist_name_tree[0]) if artist_name_tree else None
        song_list_name_tree = tree.xpath('//h2[contains(@class,"f-ff2")]/text()')
        song_list_name = str(song_list_name_tree[0]) if song_list_name_tree else None

        folder = './' + artist_name if artist_name else './' + song_list_name

        if not os.path.exists(folder):
            os.mkdir(folder)

        for i, s in enumerate(song_list):
            href = str(s.xpath('./@href')[0])
            song_id = href.split('=')[-1]
            src = out_link + song_id
            title = str(s.xpath('./text()')[0])
            filename = title + '.mp3'
            filepath = folder + '/' + filename
            self.gequlist.append('第{}首音乐：{}\n'.format(i + 1, filename))
            self.slm.setStringList(self.gequlist)
            self.GeShouGeQu.setModel(self.slm)
            print('开始下载第{}首音乐：{}\n'.format(i + 1, filename))

            try:
                data = requests.get(src).content

                with open(filepath, 'wb') as f:
                    f.write(data)
            except Exception as e:
                print(e)

        print('{}首全部歌曲已经下载完毕！'.format(len(song_list)))

    def download_lyric(self,song_name, song_id):
        url = 'http://music.163.com/api/song/lyric?id={}&lv=-1&kv=-1&tv=-1'.format(song_id)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36',
            'Referer': 'https://music.163.com/',
            'Host': 'music.163.com'
        }
        res = requests.get(url=url, headers=headers).text
        json_obj = json.loads(res)
        lyric = json_obj['lrc']['lyric']
        reg = re.compile(r'\[.*\]')
        lrc_text = re.sub(reg, '', lyric).strip()

        print(song_name, lrc_text)

    def startdo(self):
        music_list = 'https://music.163.com/#/artist?id=' + str(self.GeShouID.text())
        self.download_songs(music_list)


def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    show_MainWindow()
